import React, { memo } from 'react';
import {
  View,
  Text,
  Image,
  TouchableOpacity,
  StyleSheet,
  Linking,
  Alert
} from 'react-native';
import { COLORS, FONT_SIZES, SPACING, BORDER_RADIUS, SHADOWS } from '../../constants';
import type { RealProduct } from '../../services/RealProductService';

interface ProductCardProps {
  product: RealProduct;
  onPress?: (product: RealProduct) => void;
  compact?: boolean;
}

const ProductCard: React.FC<ProductCardProps> = memo(({ product, onPress, compact = false }) => {
  const handlePress = () => {
    console.log('ProductCard ÌÅ¥Î¶≠Îê®:', product.name, product.productUrl);
    if (onPress) {
      console.log('onPress ÏΩúÎ∞± Ïã§Ìñâ');
      onPress(product);
    } else {
      console.log('Í∏∞Î≥∏ ÎßÅÌÅ¨ Ïó¥Í∏∞ Ïã§Ìñâ');
      // Í∏∞Î≥∏ ÎèôÏûë: ÏÉÅÌíà ÎßÅÌÅ¨Î°ú Ïù¥Îèô
      handleOpenProduct();
    }
  };

  const handleOpenProduct = async () => {
    console.log('handleOpenProduct ÏãúÏûë');
    try {
      const url = product.affiliate?.trackingUrl || product.productUrl;
      console.log('Ïó¥Î†§Îäî URL:', url);
      
      if (!url) {
        console.log('URLÏù¥ ÏóÜÏùå');
        Alert.alert('Ïò§Î•ò', 'ÏÉÅÌíà ÎßÅÌÅ¨Í∞Ä ÏóÜÏäµÎãàÎã§.');
        return;
      }
      
      // ÏõπÏóêÏÑúÎäî window.open ÏÇ¨Ïö©
      if (typeof window !== 'undefined') {
        console.log('Ïõπ ÌôòÍ≤Ω: window.open ÏÇ¨Ïö©');
        window.open(url, '_blank');
        return;
      }
      
      // Î™®Î∞îÏùºÏóêÏÑúÎäî Linking ÏÇ¨Ïö©
      console.log('Î™®Î∞îÏùº ÌôòÍ≤Ω: Linking.openURL ÏÇ¨Ïö©');
      const supported = await Linking.canOpenURL(url);
      console.log('URL ÏßÄÏõê Ïó¨Î∂Ä:', supported);
      
      if (supported) {
        await Linking.openURL(url);
        console.log('ÎßÅÌÅ¨ Ïó¥Í∏∞ ÏÑ±Í≥µ');
      } else {
        console.log('ÎßÅÌÅ¨ ÏßÄÏõê ÏïàÎê®');
        Alert.alert('Ïò§Î•ò', 'ÎßÅÌÅ¨Î•º Ïó¥ Ïàò ÏóÜÏäµÎãàÎã§.');
      }
    } catch (error) {
      console.error('ÏÉÅÌíà ÎßÅÌÅ¨ Ïó¥Í∏∞ Ïã§Ìå®:', error);
      Alert.alert('Ïò§Î•ò', `ÎßÅÌÅ¨Î•º Ïó¥ Ïàò ÏóÜÏäµÎãàÎã§: ${error}`);
    }
  };

  const formatPrice = (price: number): string => {
    return price.toLocaleString('ko-KR') + 'Ïõê';
  };

  const cardStyle = compact ? styles.compactCard : styles.card;
  const imageStyle = compact ? styles.compactImage : styles.image;

  return (
    <TouchableOpacity 
      style={cardStyle}
      onPress={handlePress}
      activeOpacity={0.8}
    >
      {/* ÏÉÅÌíà Ïù¥ÎØ∏ÏßÄ */}
      <View style={styles.imageContainer}>
        <Image 
          source={{ uri: product.imageUrl }}
          style={imageStyle}
          resizeMode="cover"
        />
        
        {/* Ï∂îÏ≤ú Î±ÉÏßÄ */}
        <View style={styles.recommendBadge}>
          <Text style={styles.recommendText}>Ï∂îÏ≤ú</Text>
        </View>
        
        {/* ÏáºÌïëÎ™∞ Î°úÍ≥† */}
        <View style={styles.mallBadge}>
          <Text style={styles.mallText}>{product.mallName}</Text>
        </View>
      </View>

      {/* ÏÉÅÌíà Ï†ïÎ≥¥ */}
      <View style={styles.productInfo}>
        {/* Î∏åÎûúÎìúÎ™Ö */}
        <Text style={styles.brandName} numberOfLines={1}>{product.brand}</Text>
        
        {/* ÏÉÅÌíàÎ™Ö */}
        <Text style={styles.productName} numberOfLines={compact ? 1 : 2}>
          {product.name}
        </Text>

        {/* Í∞ÄÍ≤© ÌôïÏù∏ Î≤ÑÌäº */}
        <View style={styles.priceContainer}>
          <TouchableOpacity style={styles.priceButton} onPress={handlePress}>
            <Text style={styles.priceButtonText}>üí∞ Í∞ÄÍ≤© ÌôïÏù∏ÌïòÍ∏∞</Text>
          </TouchableOpacity>
        </View>

        {/* Î∏åÎûúÎìú Ï†ïÎ≥¥Îßå ÌëúÏãú */}
        {!compact && (
          <View style={styles.brandContainer}>
            <Text style={styles.brandInfo}>{product.brand} Í≥µÏãù</Text>
          </View>
        )}

        {/* ÏÉâÏÉÅ ÏòµÏÖò */}
        {!compact && product.colors.length > 0 && (
          <View style={styles.colorContainer}>
            {product.colors.slice(0, 4).map((color, index) => (
              <View key={index} style={styles.colorDot}>
                <Text style={styles.colorText}>{color}</Text>
              </View>
            ))}
            {product.colors.length > 4 && (
              <Text style={styles.moreColors}>+{product.colors.length - 4}</Text>
            )}
          </View>
        )}
      </View>
    </TouchableOpacity>
  );
});

const styles = StyleSheet.create({
  brandName: {
    color: COLORS.text.secondary,
    fontSize: FONT_SIZES.xs,
    fontWeight: '500',
    marginBottom: 2,
  },
  card: {
    backgroundColor: COLORS.white,
    borderRadius: BORDER_RADIUS.lg,
    marginBottom: SPACING.md,
    marginHorizontal: SPACING.xs,
    overflow: 'hidden',
    width: 160,
    ...SHADOWS.sm,
  },
  colorContainer: {
    alignItems: 'center',
    flexDirection: 'row',
    flexWrap: 'wrap',
  },
  colorDot: {
    backgroundColor: COLORS.gray[100],
    borderRadius: BORDER_RADIUS.xs,
    marginBottom: 2,
    marginRight: SPACING.xs,
    paddingHorizontal: SPACING.xs,
    paddingVertical: 2,
  },
  colorText: {
    color: COLORS.text.secondary,
    fontSize: FONT_SIZES.xs - 2,
  },
  compactCard: {
    backgroundColor: COLORS.white,
    borderRadius: BORDER_RADIUS.md,
    marginBottom: SPACING.sm,
    marginHorizontal: SPACING.xs,
    overflow: 'hidden',
    width: 140,
    ...SHADOWS.xs,
  },
  compactImage: {
    height: 160,
    width: '100%',
  },
  currentPrice: {
    color: COLORS.text.primary,
    fontSize: FONT_SIZES.base,
    fontWeight: 'bold',
  },
  discountBadge: {
    backgroundColor: COLORS.error,
    borderRadius: BORDER_RADIUS.sm,
    left: SPACING.xs,
    paddingHorizontal: SPACING.xs,
    paddingVertical: 2,
    position: 'absolute',
    top: SPACING.xs,
  },
  discountText: {
    color: COLORS.white,
    fontSize: FONT_SIZES.xs,
    fontWeight: 'bold',
  },
  image: {
    height: 200,
    width: '100%',
  },
  imageContainer: {
    position: 'relative',
  },
  mallBadge: {
    backgroundColor: 'rgba(0, 0, 0, 0.7)',
    borderRadius: BORDER_RADIUS.xs,
    paddingHorizontal: SPACING.xs,
    paddingVertical: 2,
    position: 'absolute',
    right: SPACING.xs,
    top: SPACING.xs,
  },
  mallText: {
    color: COLORS.white,
    fontSize: FONT_SIZES.xs - 2,
    fontWeight: '500',
  },
  moreColors: {
    color: COLORS.text.secondary,
    fontSize: FONT_SIZES.xs,
    marginLeft: SPACING.xs,
  },
  originalPrice: {
    color: COLORS.text.secondary,
    fontSize: FONT_SIZES.xs,
    marginBottom: 2,
    textDecorationLine: 'line-through',
  },
  priceContainer: {
    marginBottom: SPACING.xs,
  },
  priceButton: {
    backgroundColor: COLORS.primary,
    borderRadius: BORDER_RADIUS.md,
    paddingHorizontal: SPACING.sm,
    paddingVertical: SPACING.xs,
    alignItems: 'center',
  },
  priceButtonText: {
    color: COLORS.white,
    fontSize: FONT_SIZES.xs,
    fontWeight: '600',
  },
  brandContainer: {
    marginBottom: SPACING.xs,
  },
  brandInfo: {
    color: COLORS.text.secondary,
    fontSize: FONT_SIZES.xs,
    fontWeight: '500',
  },
  recommendBadge: {
    backgroundColor: COLORS.success,
    borderRadius: BORDER_RADIUS.sm,
    left: SPACING.xs,
    paddingHorizontal: SPACING.xs,
    paddingVertical: 2,
    position: 'absolute',
    top: SPACING.xs,
  },
  recommendText: {
    color: COLORS.white,
    fontSize: FONT_SIZES.xs,
    fontWeight: 'bold',
  },
  productInfo: {
    padding: SPACING.sm,
  },
  productName: {
    color: COLORS.text.primary,
    fontSize: FONT_SIZES.sm,
    fontWeight: '600',
    lineHeight: 18,
    marginBottom: SPACING.xs,
  },
  rating: {
    color: COLORS.warning,
    fontSize: FONT_SIZES.xs,
    fontWeight: '600',
    marginRight: SPACING.xs,
  },
  ratingContainer: {
    alignItems: 'center',
    flexDirection: 'row',
    marginBottom: SPACING.xs,
  },
  reviewCount: {
    color: COLORS.text.secondary,
    fontSize: FONT_SIZES.xs,
  },
});

ProductCard.displayName = 'ProductCard';

export default ProductCard;